plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'uk.gov.digital.ho.hocs'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

plugins.withType(JacocoPlugin) {
    tasks["test"].finalizedBy 'jacocoTestReport'
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        html.required = false
        csv.required = false
        //for XML
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

dependencyManagement {
    imports {
        mavenBom 'org.camunda.bpm:camunda-bom:7.9.0'
    }
}

dependencies {


    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude(module: 'spring-boot-starter-tomcat')
    }
    implementation('org.springframework.boot:spring-boot-starter-undertow')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-json')
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('com.github.ben-manes.caffeine:caffeine')

    implementation('net.logstash.logback:logstash-logback-encoder:7.0.1')

    implementation('org.camunda.bpm:camunda-engine-spring:7.9.0')
    implementation('com.fasterxml.uuid:java-uuid-generator:4.0.1')
    implementation('commons-codec:commons-codec:1.15')
    implementation('org.apache.httpcomponents:httpclient:4.5.13')

    implementation 'org.postgresql:postgresql:42.3.3'

    implementation 'org.projectlombok:lombok:1.18.22'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    annotationProcessor "org.springframework:spring-context-indexer:5.3.17"

    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.assertj:assertj-core')

    testImplementation('org.camunda.bpm.extension:camunda-bpm-assert:1.2')
    testImplementation('org.camunda.bpm.extension.mockito:camunda-bpm-mockito:5.16.0')
    testImplementation('org.camunda.bpm.extension:camunda-bpm-assert-scenario:1.1.1')
    testImplementation('org.camunda.bpm.extension:camunda-bpm-process-test-coverage:0.4.0')

    testImplementation('com.h2database:h2')
}

sourceSets {
    test {
        resources.srcDir 'src/main/resources'
    }

    integrationTest {
        java.srcDir 'src/integration-test/java'
        resources.srcDir 'src/integration-test/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntime
}

plugins.withType(JacocoPlugin) {
    tasks["test"].finalizedBy 'jacocoTestReport'
}

test {
    maxHeapSize = "1024m"
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        html.required = false
        csv.required = false
        //for XML
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

task createCOMPSnapshots {

    doLast {

        def compDir = "src/main/resources/processes";
        FileTree compFiles = fileTree(compDir).matching {
            include "COMP_*.bpmn"
            include "COMP.bpmn"
        }

        compFiles.visit(f -> {
            exec {
                commandLine 'src/test/scripts/diff_COMP_COMP2.sh', compDir + "/" + f.name,
                        'src/test/diffs'
            }

        }
        )

    }
}

task checkCOMPSnapshots {

    doFirst {
        def compDiffs = "src/test/diffs"
        def compFiles = "src/main/resources/processes/COMP_*.bpmn";

        exec {
            commandLine 'src/test/scripts/check_COMP_COMP2.sh', compFiles, compDiffs
        }

        compFiles = "src/main/resources/processes/COMP.bpmn";

        exec {
            commandLine 'src/test/scripts/check_COMP_COMP2.sh', compFiles, compDiffs
        }
    }

}

task createBFSnapshots {

    doLast {

        def bfDir = "src/main/resources/processes";
        FileTree bfFiles = fileTree(bfDir).matching {
            include "BF_*.bpmn"
            include "BF.bpmn"
        }

        bfFiles.visit(f -> {
            exec {
                commandLine 'src/test/scripts/diff_BF_BF2.sh', bfDir + "/" + f.name,
                        'src/test/diffs'
            }

        }
        )

    }
}

task checkBFSnapshots {

    doFirst {
        def bfDiffs = "src/test/diffs"
        def bfFiles = "src/main/resources/processes/BF_*.bpmn";

        exec {
            commandLine 'src/test/scripts/check_BF_BF2.sh', bfFiles, bfDiffs
        }

        bfFiles = "src/main/resources/processes/BF.bpmn";

        exec {
            commandLine 'src/test/scripts/check_BF_BF2.sh', bfFiles, bfDiffs
        }
    }

}

jar {
    enabled = false
}

check.dependsOn integrationTest
test.dependsOn checkBFSnapshots
test.dependsOn checkCOMPSnapshots
